import os
import logging
import sqlite3
import asyncio
import base64
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from datetime import datetime
import textwrap
import re
from PIL import Image
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "8358851724:AAEVVzB4EqDqmWNLjrAnW2mZVnALCzPqWzw"
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect('realtor_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS websites (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            title TEXT,
            description TEXT,
            price TEXT,
            location TEXT,
            area TEXT,
            rooms TEXT,
            completion_date TEXT,
            broker_phone TEXT,
            broker_email TEXT,
            broker_tg TEXT,
            style_used TEXT,
            html_content TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã
def fix_database():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É"""
    try:
        conn = sqlite3.connect('realtor_bot.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ websites
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='websites'")
        if not cursor.fetchone():
            print("üìä –¢–∞–±–ª–∏—Ü—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã, —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–µ")
            conn.close()
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ price
        cursor.execute("PRAGMA table_info(websites)")
        columns = [column[1] for column in cursor.fetchall()]
        
        missing_columns = []
        required_columns = ['price', 'location', 'area', 'rooms', 'completion_date', 
                          'broker_phone', 'broker_email', 'broker_tg', 'style_used']
        
        for column in required_columns:
            if column not in columns:
                missing_columns.append(column)
        
        if missing_columns:
            print(f"üîÑ –î–æ–±–∞–≤–ª—è—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
            for column in missing_columns:
                try:
                    cursor.execute(f'ALTER TABLE websites ADD COLUMN {column} TEXT')
                except sqlite3.OperationalError:
                    print(f"–ö–æ–ª–æ–Ω–∫–∞ {column} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            conn.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            print("‚úÖ –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
fix_database()
init_db()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_sessions = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåê –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç")],
            [KeyboardButton(text="üìö –ú–æ–∏ —Å–∞–π—Ç—ã")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )

def get_yes_no_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
        ],
        resize_keyboard=True
    )

# ===== –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ê–ô–¢–ê =====

async def download_photo(photo_id):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ"""
    try:
        file = await bot.get_file(photo_id)
        photo_data = await bot.download_file(file.file_path)
        
        image = Image.open(io.BytesIO(photo_data.read()))
        image.thumbnail((1200, 800))
        
        buffered = io.BytesIO()
        image.save(buffered, format="JPEG", quality=90)
        img_str = base64.b64encode(buffered.getvalue()).decode()
        
        return f"data:image/jpeg;base64,{img_str}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return None

def detect_style_from_description(description):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å —Å–∞–π—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    desc_lower = description.lower()
    
    styles = {
        "luxury": {"name": "–†–æ—Å–∫–æ—à–Ω—ã–π", "color": "#d4af37", "secondary": "#2c3e50", "accent": "#8b4513"},
        "modern": {"name": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "color": "#34495e", "secondary": "#e74c3c", "accent": "#3498db"},
        "classic": {"name": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "color": "#8b4513", "secondary": "#d4af37", "accent": "#2c3e50"},
        "beach": {"name": "–ü–ª—è–∂–Ω—ã–π", "color": "#0077be", "secondary": "#f4a460", "accent": "#87ceeb"},
        "urban": {"name": "–£—Ä–±–∞–Ω", "color": "#2c3e50", "secondary": "#7f8c8d", "accent": "#e74c3c"},
    }
    
    for style, data in styles.items():
        if style in desc_lower:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            return data
    
    # –°—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {"name": "–ü—Ä–µ–º–∏—É–º", "color": "#2c3e50", "secondary": "#3498db", "accent": "#e74c3c"}


async def generate_website_html(user_data, photo_urls):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π HTML —Å–∞–π—Ç"""
    
    style = user_data['style']
    photos = photo_urls[:12]  # –ú–∞–∫—Å–∏–º—É–º 12 —Ñ–æ—Ç–æ
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –≥–∞–ª–µ—Ä–µ—é
    gallery_html = ""
    for i, photo_data in enumerate(photos):
        if photo_data:
            gallery_html += f'''
            <div class="gallery-item">
                <img src="{photo_data}" alt="–§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞ {i+1}" loading="lazy">
                <div class="gallery-overlay">
                    <span class="gallery-number">{i+1}</span>
                </div>
            </div>'''
        else:
            gallery_html += f'<div class="gallery-item placeholder">–§–æ—Ç–æ {i+1}</div>'
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    contacts_html = ""
    if user_data.get('broker_phone'):
        contacts_html += f'''
        <div class="contact-item">
            <div class="contact-icon">üìû</div>
            <div class="contact-info">
                <h4>–¢–µ–ª–µ—Ñ–æ–Ω</h4>
                <p>{user_data['broker_phone']}</p>
            </div>
        </div>'''
    
    if user_data.get('broker_email'):
        contacts_html += f'''
        <div class="contact-item">
            <div class="contact-icon">üìß</div>
            <div class="contact-info">
                <h4>Email</h4>
                <p>{user_data['broker_email']}</p>
            </div>
        </div>'''
    
    if user_data.get('broker_tg'):
        contacts_html += f'''
        <div class="contact-item">
            <div class="contact-icon">‚úàÔ∏è</div>
            <div class="contact-info">
                <h4>Telegram</h4>
                <p>@{user_data['broker_tg']}</p>
            </div>
        </div>'''
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–æ—Ñ–∏—Å –∏ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã)
    if user_data.get('broker_office'):
        contacts_html += f'''
        <div class="contact-item">
            <div class="contact-icon">üè¢</div>
            <div class="contact-info">
                <h4>–û—Ñ–∏—Å</h4>
                <p>{user_data['broker_office']}</p>
            </div>
        </div>'''
    
    if user_data.get('broker_hours'):
        contacts_html += f'''
        <div class="contact-item">
            <div class="contact-icon">‚è∞</div>
            <div class="contact-info">
                <h4>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã</h4>
                <p>{user_data['broker_hours']}</p>
            </div>
        </div>'''
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)
    specs_html = ""
    specs = [
        ("üí∞ –¶–µ–Ω–∞", user_data.get('price')),
        ("üìç –õ–æ–∫–∞—Ü–∏—è", user_data.get('location')),
        ("üìê –ü–ª–æ—â–∞–¥—å", user_data.get('area')),
        ("üö™ –ö–æ–º–Ω–∞—Ç—ã", user_data.get('rooms')),
        ("üìÖ –°—Ä–æ–∫ —Å–¥–∞—á–∏", user_data.get('completion_date')),
        ("üõãÔ∏è –û—Ç–¥–µ–ª–∫–∞", user_data.get('decoration')),
        ("üå≥ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", user_data.get('infrastructure')),
        ("üöó –ü–∞—Ä–∫–æ–≤–∫–∞", user_data.get('parking'))
    ]
    
    for icon, value in specs:
        if value and value not in ['–ù–µ —É–∫–∞–∑–∞–Ω–∞', '–ù–µ —É–∫–∞–∑–∞–Ω–æ', '–ù–µ —É–∫–∞–∑–∞–Ω']:
            specs_html += f'''
            <div class="spec-item">
                <div class="spec-icon">{icon.split()[0]}</div>
                <div class="spec-content">
                    <h4>{icon}</h4>
                    <p>{value}</p>
                </div>
            </div>'''

    # –§–æ—Ä–º–∏—Ä—É–µ–º CTA –∫–Ω–æ–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã)
    cta_buttons_html = ""
    if user_data.get('broker_phone') or user_data.get('broker_tg'):
        cta_buttons_html += '<div class="cta-buttons">'
        
        if user_data.get('broker_phone'):
            cta_buttons_html += f'''
            <a href="tel:{user_data['broker_phone']}" class="btn">
                <i class="fas fa-phone"></i> –ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å–µ–π—á–∞—Å
            </a>'''
        
        if user_data.get('broker_tg'):
            cta_buttons_html += f'''
            <a href="https://t.me/{user_data['broker_tg']}" class="btn btn-outline">
                <i class="fab fa-telegram"></i> –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram
            </a>'''
        
        cta_buttons_html += '</div>'

    html_content = f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{user_data['title']} - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {{
            --primary: {style['color']};
            --secondary: {style['secondary']};
            --accent: {style['accent']};
            --dark: #2c3e50;
            --light: #ecf0f1;
            --text: #2c3e50;
            --text-light: #7f8c8d;
            --shadow: 0 25px 50px rgba(0,0,0,0.15);
            --shadow-hover: 0 35px 70px rgba(0,0,0,0.25);
            --radius: 20px;
            --transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }}
        
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Inter', sans-serif;
            line-height: 1.7;
            color: var(--text);
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            min-height: 100vh;
            overflow-x: hidden;
        }}
        
        .container {{
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }}
        
        /* Header */
        .header {{
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: white;
            padding: 80px 0;
            text-align: center;
            position: relative;
            overflow: hidden;
        }}
        
        .header::before {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
            opacity: 0.1;
        }}
        
        .header-content {{
            position: relative;
            z-index: 2;
        }}
        
        .property-badge {{
            background: rgba(255,255,255,0.2);
            backdrop-filter: blur(10px);
            padding: 12px 25px;
            border-radius: 50px;
            display: inline-block;
            margin-bottom: 30px;
            font-weight: 600;
            font-size: 0.9rem;
            letter-spacing: 1px;
            text-transform: uppercase;
        }}
        
        .property-title {{
            font-size: 4rem;
            font-weight: 800;
            margin-bottom: 20px;
            line-height: 1.2;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }}
        
        .property-description {{
            font-size: 1.4rem;
            margin-bottom: 40px;
            opacity: 0.95;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
            line-height: 1.6;
        }}
        
        .property-price {{
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 40px;
            color: var(--accent);
            text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
        }}
        
        /* Navigation */
        .nav-scroll {{
            background: white;
            padding: 25px 0;
            position: sticky;
            top: 0;
            z-index: 1000;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        }}
        
        .nav-container {{
            display: flex;
            justify-content: center;
            gap: 40px;
        }}
        
        .nav-item {{
            color: var(--text);
            text-decoration: none;
            font-weight: 600;
            font-size: 1.1rem;
            padding: 10px 20px;
            border-radius: 25px;
            transition: var(--transition);
            position: relative;
        }}
        
        .nav-item:hover {{
            color: var(--primary);
            transform: translateY(-2px);
        }}
        
        .nav-item::after {{
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            width: 0;
            height: 3px;
            background: var(--primary);
            transition: var(--transition);
            transform: translateX(-50%);
            border-radius: 3px;
        }}
        
        .nav-item:hover::after {{
            width: 60%;
        }}
        
        /* Sections */
        .section {{
            padding: 100px 0;
        }}
        
        .section-title {{
            font-size: 3rem;
            font-weight: 700;
            text-align: center;
            margin-bottom: 60px;
            color: var(--dark);
            position: relative;
        }}
        
        .section-title::after {{
            content: '';
            position: absolute;
            bottom: -15px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 4px;
            background: linear-gradient(90deg, var(--primary), var(--accent));
            border-radius: 2px;
        }}
        
        /* About Section */
        .about-content {{
            background: white;
            padding: 60px;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            margin-bottom: 60px;
            line-height: 1.8;
            font-size: 1.2rem;
        }}
        
        /* Specifications */
        .specs-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 30px;
            margin-bottom: 60px;
        }}
        
        .spec-item {{
            background: white;
            padding: 40px;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            gap: 25px;
            transition: var(--transition);
        }}
        
        .spec-item:hover {{
            transform: translateY(-8px);
            box-shadow: var(--shadow-hover);
        }}
        
        .spec-icon {{
            font-size: 2.5rem;
            color: var(--primary);
            flex-shrink: 0;
        }}
        
        .spec-content h4 {{
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 8px;
            color: var(--dark);
        }}
        
        .spec-content p {{
            color: var(--text-light);
            font-size: 1.1rem;
        }}
        
        /* Gallery */
        .gallery {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 25px;
            margin-bottom: 60px;
        }}
        
        .gallery-item {{
            position: relative;
            border-radius: var(--radius);
            overflow: hidden;
            box-shadow: var(--shadow);
            transition: var(--transition);
            height: 350px;
        }}
        
        .gallery-item:hover {{
            transform: scale(1.03);
            box-shadow: var(--shadow-hover);
        }}
        
        .gallery-item img {{
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: var(--transition);
        }}
        
        .gallery-item:hover img {{
            transform: scale(1.1);
        }}
        
        .gallery-overlay {{
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 10px 15px;
            border-radius: 20px;
            font-weight: 600;
        }}
        
        .gallery-item.placeholder {{
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.3rem;
            font-weight: 600;
        }}
        
        /* Contact Section */
        .contact-section {{
            background: linear-gradient(135deg, var(--dark) 0%, #34495e 100%);
            color: white;
            padding: 100px 0;
        }}
        
        .contact-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 40px;
            margin-bottom: 60px;
        }}
        
        .contact-item {{
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            padding: 40px;
            border-radius: var(--radius);
            text-align: center;
            transition: var(--transition);
        }}
        
        .contact-item:hover {{
            background: rgba(255,255,255,0.15);
            transform: translateY(-5px);
        }}
        
        .contact-icon {{
            font-size: 3rem;
            margin-bottom: 20px;
            color: var(--accent);
        }}
        
        .contact-info h4 {{
            font-size: 1.4rem;
            margin-bottom: 15px;
            color: white;
        }}
        
        .contact-info p {{
            font-size: 1.2rem;
            opacity: 0.9;
        }}
        
        /* CTA Buttons */
        .cta-buttons {{
            display: flex;
            justify-content: center;
            gap: 20px;
            flex-wrap: wrap;
        }}
        
        .btn {{
            background: linear-gradient(135deg, var(--primary), var(--accent));
            color: white;
            padding: 20px 40px;
            border: none;
            border-radius: 50px;
            font-size: 1.2rem;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 12px;
            transition: var(--transition);
            cursor: pointer;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }}
        
        .btn:hover {{
            transform: translateY(-3px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.3);
            color: white;
        }}
        
        .btn-outline {{
            background: transparent;
            border: 2px solid var(--accent);
            color: var(--accent);
        }}
        
        .btn-outline:hover {{
            background: var(--accent);
            color: white;
        }}
        
        /* Footer */
        .footer {{
            background: var(--dark);
            color: white;
            padding: 60px 0 30px;
            text-align: center;
        }}
        
        .watermark {{
            opacity: 0.7;
            font-size: 0.9rem;
            margin-top: 40px;
            color: var(--light);
        }}
        
        /* Animations */
        @keyframes fadeInUp {{
            from {{ 
                opacity: 0; 
                transform: translateY(50px); 
            }}
            to {{ 
                opacity: 1; 
                transform: translateY(0); 
            }}
        }}
        
        .animate {{
            animation: fadeInUp 1s ease-out;
        }}
        
        /* Responsive */
        @media (max-width: 1200px) {{
            .property-title {{ font-size: 3rem; }}
            .section-title {{ font-size: 2.5rem; }}
        }}
        
        @media (max-width: 768px) {{
            .property-title {{ font-size: 2.2rem; }}
            .property-description {{ font-size: 1.1rem; }}
            .property-price {{ font-size: 1.8rem; }}
            .section-title {{ font-size: 2rem; }}
            .section {{ padding: 60px 0; }}
            .gallery {{ grid-template-columns: 1fr; }}
            .specs-grid {{ grid-template-columns: 1fr; }}
            .contact-grid {{ grid-template-columns: 1fr; }}
            .cta-buttons {{ flex-direction: column; }}
            .nav-container {{ flex-wrap: wrap; gap: 20px; }}
            .about-content {{ padding: 30px; }}
        }}
        
        @media (max-width: 480px) {{
            .property-title {{ font-size: 1.8rem; }}
            .header {{ padding: 60px 0; }}
            .section {{ padding: 40px 0; }}
        }}
        
        /* Additional styles for empty states */
        .no-specs, .no-photos {{
            text-align: center;
            color: var(--text-light);
            font-size: 1.2rem;
            padding: 40px;
            grid-column: 1 / -1;
        }}
    </style>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="container">
            <div class="header-content animate">
                <div class="property-badge">–≠–ª–∏—Ç–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å</div>
                <h1 class="property-title">{user_data['title']}</h1>
                <p class="property-description">{user_data['description']}</p>
                <div class="property-price">{user_data.get('price', '–¶–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É')}</div>
                
                {cta_buttons_html if cta_buttons_html else ''}
            </div>
        </div>
    </header>

    <!-- Navigation -->
    <nav class="nav-scroll">
        <div class="container">
            <div class="nav-container">
                <a href="#about" class="nav-item">–û –ø—Ä–æ–µ–∫—Ç–µ</a>
                <a href="#specs" class="nav-item">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</a>
                <a href="#gallery" class="nav-item">–ì–∞–ª–µ—Ä–µ—è</a>
                <a href="#location" class="nav-item">–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ</a>
                { '<a href="#contact" class="nav-item">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>' if contacts_html else '' }
            </div>
        </div>
    </nav>

    <!-- About Section -->
    <section id="about" class="section">
        <div class="container">
            <h2 class="section-title">–û –ø—Ä–æ–µ–∫—Ç–µ</h2>
            <div class="about-content animate">
                <p>{user_data['description']}</p>
            </div>
        </div>
    </section>

    <!-- Specifications -->
    <section id="specs" class="section" style="background: #f8f9fa;">
        <div class="container">
            <h2 class="section-title">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h2>
            <div class="specs-grid">
                {specs_html if specs_html else '<p class="no-specs">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã</p>'}
            </div>
        </div>
    </section>

    <!-- Gallery -->
    <section id="gallery" class="section">
        <div class="container">
            <h2 class="section-title">–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è</h2>
            <div class="gallery">
                {gallery_html if gallery_html else '<p class="no-photos">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>'}
            </div>
        </div>
    </section>

    <!-- Location -->
    <section id="location" class="section" style="background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%); color: white;">
        <div class="container">
            <h2 class="section-title" style="color: white;">–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h2>
            <div class="about-content" style="background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); color: white;">
                <h3 style="margin-bottom: 20px; color: white;">{user_data.get('location', '–ü—Ä–µ—Å—Ç–∏–∂–Ω—ã–π —Ä–∞–π–æ–Ω')}</h3>
                <p>–û–±—ä–µ–∫—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–∞–º—ã—Ö –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã—Ö –∏ —Ä–∞–∑–≤–∏—Ç—ã—Ö —Ä–∞–π–æ–Ω–æ–≤ –≥–æ—Ä–æ–¥–∞. –û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, —Ä–∞–∑–≤–∏—Ç–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –±–ª–∏–∑–æ—Å—Ç—å –∫ –ø–∞—Ä–∫–æ–≤—ã–º –∑–æ–Ω–∞–º –∏ –æ—Å–Ω–æ–≤–Ω—ã–º –º–∞–≥–∏—Å—Ç—Ä–∞–ª—è–º.</p>
            </div>
        </div>
    </section>

 contacts_html = ""
for contact in contacts_list:  # –¥–æ–ø—É—Å—Ç–∏–º, —É —Ç–µ–±—è —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    cont   <div class="contact-item">
# –§–æ—Ä–º–∏—Ä—É–µ–º HTML –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
contacts_html = ""
for contact in contacts_list:  # contacts_list ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    contacts_html += f'''
# –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–ø—Ä–∏–º–µ—Ä)
# –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
contacts_list = [
    {"name": "–ê–Ω—Ç–æ–Ω", "phone": "+79161234567"},
    {"name": "–ò—Ä–∏–Ω–∞", "phone": "+79169876543"}
]

# –§–æ—Ä–º–∏—Ä—É–µ–º HTML –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
contacts_html = ""
for contact in contacts_list:
    contacts_html += f'''
    <div class="contact-item">
        <p>–ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {contact.get("name", "")}</p>
        <p>–¢–µ–ª–µ—Ñ–æ–Ω: {contact.get("phone", "")}</p>
    </div>
    '''

# –û—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã
full_html = f'''
<section id="contact" class="contact-section">
    <div class="container">
        <h2 class="section-title" style="color: white;">–ö–æ–Ω—Ç–∞–∫—Ç—ã</h2>
        <div class="contact-grid">
            {contacts_html}
        </div>
    </div>
</section>

<footer class="footer">
    <div class="container">
        <p>¬© 2024 {user_data['title']}. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
        <div class="watermark">
            –°–∞–π—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ @ANton618_bot
        </div>
    </div>
</footer>
''' 

# ===== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====

@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    
    conn = sqlite3.connect('realtor_bot.db')
    cursor = conn.cursor()
    cursor.execute(
        'INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)',
        (user_id, message.from_user.username, message.from_user.first_name)
    )
    conn.commit()
    conn.close()
    
    welcome_text = f"""
<b>üèÜ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –°–ê–ô–¢–û–í</b>

üíé <i>–°–æ–∑–¥–∞—é —Å–∞–π—Ç—ã –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞ –¥–ª—è —ç–ª–∏—Ç–Ω–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</i>

‚ú® <b>–ü–û–õ–ù–´–ô –ö–û–ù–¢–†–û–õ–¨:</b>
‚Ä¢ üì∑ –í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –≤ HD –∫–∞—á–µ—Å—Ç–≤–µ
‚Ä¢ üí∞ –£–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã –∏ —Å—Ä–æ–∫–æ–≤ —Å–¥–∞—á–∏
‚Ä¢ üìç –¢–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
‚Ä¢ üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã –±—Ä–æ–∫–µ—Ä–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
‚Ä¢ üé® –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
‚Ä¢ ‚ö° –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã

<code>–ù–∞—á–Ω–∏—Ç–µ —Å –∫–Ω–æ–ø–∫–∏ ¬´–°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç¬ª üëá</code>
"""
    
    await message.answer(welcome_text, reply_markup=get_main_menu())

@dp.message(F.text == "üåê –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç")
async def start_creation(message: types.Message):
    user_id = message.from_user.id
    user_sessions[user_id] = {
        'state': 'waiting_photos',
        'photos': [],
        'title': '',
        'description': '',
        'price': '',
        'location': '',
        'area': '',
        'rooms': '',
        'completion_date': '',
        'broker_phone': '',
        'broker_email': '',
        'broker_tg': '',
        'style': {}
    }
    await message.answer(
        "üì∏ <b>–®–ê–ì 1 –∏–∑ 8: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 12 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
        "–≠—Ç–∏ —Ñ–æ—Ç–æ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ –≤ HD –∫–∞—á–µ—Å—Ç–≤–µ\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞ —Ä–∞–∑. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª</i>"
    )

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_sessions: return
    
    if len(user_sessions[user_id]['photos']) >= 12:
        await message.answer(
            "‚úÖ <b>–ú–∞–∫—Å–∏–º—É–º 12 —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</b>\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É"
        )
        return
    
    user_sessions[user_id]['photos'].append(message.photo[-1].file_id)
    count = len(user_sessions[user_id]['photos'])
    
    if count == 1:
        await message.answer("‚úÖ <b>–ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ</b>\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª")
    elif count == 3:
        await message.answer("‚úÖ <b>3 —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ</b>\n–ú–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è (–Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª) –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ")
    elif count == 6:
        await message.answer("‚úÖ <b>6 —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ</b>\n–û—Ç–ª–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–∞–π—Ç–∞! –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª")
    elif count == 12:
        await message.answer("‚úÖ <b>12 —Ñ–æ—Ç–æ - –º–∞–∫—Å–∏–º—É–º!</b>\n–ù–∞–ø–∏—à–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")

@dp.message(F.text == "–ì–æ—Ç–æ–≤–æ")
async def handle_done(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_sessions: return
    
    if user_sessions[user_id]['state'] == 'waiting_photos':
        if len(user_sessions[user_id]['photos']) == 0:
            await message.answer("‚ùå <b>–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã 1 —Ñ–æ—Ç–æ</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—ä–µ–∫—Ç–∞")
            return
        
        await ask_for_description(message)
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def ask_for_description(message):
    user_id = message.from_user.id
    user_sessions[user_id]['state'] = 'waiting_description'
    await message.answer(
        "üìù <b>–®–ê–ì 2 –∏–∑ 8: –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ —Å—Ç–∏–ª—å\n‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏\n‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n‚Ä¢ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è\n\n"
        "<i>–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Å–∞–π—Ç!</i>"
    )

@dp.message(F.text, lambda msg: user_sessions.get(msg.from_user.id, {}).get('state') == 'waiting_description')
async def handle_description(message: types.Message):
    user_id = message.from_user.id
    user_sessions[user_id]['description'] = message.text
    user_sessions[user_id]['style'] = detect_style_from_description(message.text)
    user_sessions[user_id]['state'] = 'waiting_title'
    
    await message.answer(
        "‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"
        "üìù <b>–®–ê–ì 3 –∏–∑ 8: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
        "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–µ–µ—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ:\n"
        "<i>–ü—Ä–∏–º–µ—Ä: ¬´–≠–ª–∏—Ç–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å RiverSide Residence¬ª</i>"
    )

@dp.message(F.text, lambda msg: user_sessions.get(msg.from_user.id, {}).get('state') == 'waiting_title')
async def handle_title(message: types.Message):
    user_id = message.from_user.id
    user_sessions[user_id]['title'] = message.text
    user_sessions[user_id]['state'] = 'waiting_price'
    
    await message.answer(
        "‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"
        "üí∞ <b>–®–ê–ì 4 –∏–∑ 8: –¶–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞:\n"
        "<i>–ü—Ä–∏–º–µ—Ä: ¬´125 000 000 —Ä—É–±.¬ª –∏–ª–∏ ¬´–¶–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É¬ª</i>"
    )

@dp.message(F.text, lambda msg: user_sessions.get(msg.from_user.id, {}).get('state') == 'waiting_price')
async def handle_price(message: types.Message):
    user_id = message.from_user.id
    user_sessions[user_id]['price'] = message.text
    user_sessions[user_id]['state'] = 'waiting_location'
    
    await message.answer(
        "‚úÖ <b>–¶–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
        "üìç <b>–®–ê–ì 5 –∏–∑ 8: –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ —Ä–∞–π–æ–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è:\n"
        "<i>–ü—Ä–∏–º–µ—Ä: ¬´–ú–æ—Å–∫–≤–∞, –ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, 12¬ª</i>"
    )

@dp.message(F.text, lambda msg: user_sessions.get(msg.from_user.id, {}).get('state') == 'waiting_location')
async def handle_location(message: types.Message):
    user_id = message.from_user.id
    user_sessions[user_id]['location'] = message.text
    user_sessions[user_id]['state'] = 'waiting_specs'
    
    await message.answer(
        "‚úÖ <b>–õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
        "üìê <b>–®–ê–ì 6 –∏–∑ 8: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "‚Ä¢ –ü–ª–æ—â–∞–¥—å (–∫–≤.–º)\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç\n‚Ä¢ –°—Ä–æ–∫ —Å–¥–∞—á–∏\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: ¬´150 –∫–≤.–º, 3 –∫–æ–º–Ω–∞—Ç—ã, —Å–¥–∞—á–∞ –≤ 2024 –≥–æ–¥—É¬ª</i>"
    )

@dp.message(F.text, lambda msg: user_sessions.get(msg.from_user.id, {}).get('state') == 'waiting_specs')
async def handle_specs(message: types.Message):
    user_id = message.from_user.id
    specs = message.text.split(',')
    
    if len(specs) >= 1:
        user_sessions[user_id]['area'] = specs[0].strip()
    if len(specs) >= 2:
        user_sessions[user_id]['rooms'] = specs[1].strip()
    if len(specs) >= 3:
        user_sessions[user_id]['completion_date'] = specs[2].strip()
    
    user_sessions[user_id]['state'] = 'waiting_contacts_choice'
    
    await message.answer(
        "‚úÖ <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
        "üë§ <b>–®–ê–ì 7 –∏–∑ 8: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞ —Å–∞–π—Ç?",
        reply_markup=get_yes_no_keyboard()
    )

@dp.message(F.text, lambda msg: user_sessions.get(msg.from_user.id, {}).get('state') == 'waiting_contacts_choice')
async def handle_contacts_choice(message: types.Message):
    user_id = message.from_user.id
    
    if message.text == "‚úÖ –î–∞":
        user_sessions[user_id]['state'] = 'waiting_contacts'
        await message.answer(
            "üìû <b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–¢–µ–ª–µ—Ñ–æ–Ω: +7 XXX XXX XX XX\n"
            "Email: your@email.com\n"
            "Telegram: @username\n\n"
            "<i>–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ</i>",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã")]],
                resize_keyboard=True
            )
        )
    else:
        user_sessions[user_id]['state'] = 'generating'
        await generate_website(message)

@dp.message(F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã")
async def skip_contacts(message: types.Message):
    user_id = message.from_user.id
    user_sessions[user_id]['state'] = 'generating'
    await generate_website(message)

@dp.message(F.text, lambda msg: user_sessions.get(msg.from_user.id, {}).get('state') == 'waiting_contacts')
async def handle_contacts(message: types.Message):
    user_id = message.from_user.id
    text = message.text
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
    if '–¢–µ–ª–µ—Ñ–æ–Ω:' in text:
        user_sessions[user_id]['broker_phone'] = text.split('–¢–µ–ª–µ—Ñ–æ–Ω:')[1].split('\n')[0].strip()
    if 'Email:' in text:
        user_sessions[user_id]['broker_email'] = text.split('Email:')[1].split('\n')[0].strip()
    if 'Telegram:' in text:
        user_sessions[user_id]['broker_tg'] = text.split('Telegram:')[1].split('\n')[0].strip().replace('@', '')
    
    user_sessions[user_id]['state'] = 'generating'
    await generate_website(message)

async def generate_website(message: types.Message):
    user_id = message.from_user.id
    user_data = user_sessions[user_id]
    
    await message.answer("‚è≥ <b>–°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç...</b>\n\n–≠—Ç–æ –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo_urls = []
        for photo_id in user_data['photos']:
            photo_url = await download_photo(photo_id)
            if photo_url:
                photo_urls.append(photo_url)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
        html_content = await generate_website_html(user_data, photo_urls)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        conn = sqlite3.connect('realtor_bot.db')
        cursor = conn.cursor()
        cursor.execute(
            '''INSERT INTO websites 
            (user_id, title, description, price, location, area, rooms, completion_date, 
             broker_phone, broker_email, broker_tg, style_used, html_content) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
            (user_id, user_data['title'], user_data['description'], user_data['price'], 
             user_data['location'], user_data['area'], user_data['rooms'], user_data['completion_date'],
             user_data.get('broker_phone'), user_data.get('broker_email'), user_data.get('broker_tg'),
             user_data['style']['name'], html_content)
        )
        conn.commit()
        conn.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –≤ —Ñ–∞–π–ª –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        filename = f"site_{user_data['title'].replace(' ', '_')}.html"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        with open(filename, 'rb') as f:
            await message.answer_document(
                types.BufferedInputFile(
                    f.read(),
                    filename=filename
                ),
                caption=f"üéâ <b>–°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                       f"üè† <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {user_data['title']}\n"
                       f"üé® <b>–°—Ç–∏–ª—å:</b> {user_data['style']['name']}\n"
                       f"üì∑ <b>–§–æ—Ç–æ:</b> {len(photo_urls)} –∏–∑ {len(user_data['photos'])}\n\n"
                       f"üíæ <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ</b>\n"
                       f"üìö <b>–°–∞–π—Ç —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏</b>",
                reply_markup=get_main_menu()
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–π—Ç–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    user_sessions.pop(user_id, None)

@dp.message(F.text == "üìö –ú–æ–∏ —Å–∞–π—Ç—ã")
async def show_websites(message: types.Message):
    user_id = message.from_user.id
    
    conn = sqlite3.connect('realtor_bot.db')
    cursor = conn.cursor()
    cursor.execute(
        'SELECT id, title, created_at FROM websites WHERE user_id = ? ORDER BY created_at DESC LIMIT 10',
        (user_id,)
    )
    websites = cursor.fetchall()
    conn.close()
    
    if not websites:
        await message.answer("üì≠ <b>–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤</b>\n\n–ù–∞—á–Ω–∏—Ç–µ —Å –∫–Ω–æ–ø–∫–∏ ¬´–°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç¬ª")
        return
    
    response = "üìö <b>–í–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã:</b>\n\n"
    for i, (site_id, title, created_at) in enumerate(websites, 1):
        response += f"{i}. <b>{title}</b>\n   üìÖ {created_at[:10]}\n\n"
    
    response += f"<b>–í—Å–µ–≥–æ —Å–∞–π—Ç–æ–≤:</b> {len(websites)}"
    await message.answer(response)

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: types.Message):
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "‚Ä¢ –ú–∏–Ω–∏–º—É–º —Ñ–æ—Ç–æ: 1\n‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Ñ–æ—Ç–æ: 12\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä —Å—Ç–∏–ª—è\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π HTML/CSS\n"
        "‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω\n"
        "‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏\n\n"
        "<i>–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞</i>"
    )

async def main():
    print("üöÄ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("üíé –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∞–π—Ç–æ–≤ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞ –≥–æ—Ç–æ–≤")
    print("üéØ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –¥–∏–∑–∞–π–Ω–æ–º")
    
    from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.utils.webhook import start_webhook
from config import BOT_TOKEN  # <- —Ç–≤–æ–π —Ç–æ–∫–µ–Ω –∑–¥–µ—Å—å

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

WEBHOOK_URL = "https://–¢–í–û–ô_–°–ï–†–í–ò–°.onrender.com/webhook"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = 8000

async def on_startup(dispatcher: Dispatcher):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(dispatcher: Dispatcher):
    await bot.delete_webhook()

# –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo(message: Message):
    await message.answer(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {message.text}")

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path="/webhook",
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
